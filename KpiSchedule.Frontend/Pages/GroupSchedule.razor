@page "/group-schedule/{scheduleId:guid}"
@using KpiSchedule.Common.Entities.Group;
@using KpiSchedule.Frontend.Shared
@using KpiSchedule.Frontend.ViewModels.Group;
@using KpiSchedule.Frontend.ViewModels;
@inject KpiScheduleApiClient client;
@inject AppStateViewModel appState;
@inject NavigationManager navManager;

<PageTitle>Розклад групи</PageTitle>
@if (scheduleEntity is null)
{
    <p>Loading...</p>
}
else
{
    <h2 class="text-center">Розклад занять для @scheduleViewModel.GroupName</h2>
    @if (appState.IsLoggedIn)
    {
        <div class="form-row text-center my-4">
            <button class="btn btn-primary" @onclick="CreateStudentSchedule">Створити особистий розклад</button>
        </div>
    }
    <h3 class="text-center">Перший тиждень</h3>
    <GroupScheduleTable Pairs="@(scheduleViewModel.GrouppedFirstWeekPairs)" />
    <h3 class="text-center">Другий тиждень</h3>
    <GroupScheduleTable Pairs="@(scheduleViewModel.GrouppedSecondWeekPairs)" />
}

@code {
    [Parameter]
    public Guid scheduleId { get; set; }

    private GroupScheduleEntity? scheduleEntity;
    private GroupScheduleViewModel scheduleViewModel;

    protected override async Task OnInitializedAsync()
    {
        appState.AppStateChanged += StateHasChanged;
        scheduleEntity = await client.GetGroupSchedule(scheduleId);
        scheduleViewModel = scheduleEntity.MapToViewModel();
    }

    private void CreateStudentSchedule()
    {
        navManager.NavigateTo($"/personal-schedule/create/{scheduleId}");
    }
}
