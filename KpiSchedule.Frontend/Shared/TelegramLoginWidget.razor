@using KpiSchedule.Api.Models.Requests;
@using KpiSchedule.Api.Models.Responses;
@using KpiSchedule.Frontend.ViewModels;
@using System.Text.Json;
@using Blazored.LocalStorage;
@inject IJSRuntime Js;
@inject KpiScheduleApiClient client;
@inject ILocalStorageService localStorage;
@inject AppStateViewModel appState;


@if (!appState.IsLoggedIn)
{
    <div class="nav-item mx-auto">
        <script id="login" suppress-error="BL9992" src="https://telegram.org/js/telegram-widget.js?14" data-telegram-login="kpi_schedule_com_bot" data-size="large" data-onauth="onTelegramAuth(user)"></script>
        <script suppress-error="BL9992" type="text/javascript">
            window.onTelegramAuth = (user) => {
                var ref = window.refs.updateTelegramLogin
                ref.invokeMethodAsync('LoginWithTelegram', user);
            }
        </script>
    </div>
}
else
{
    <span class="nav-item my-2">Ви увійшли як @telegramData.FirstName @telegramData.LastName</span>
    <div class="nav-item ms-3">
        <button class="btn btn-primary" @onclick="Logout">Вийти</button>
    </div>
}


@code {
    private TelegramLoginInterop telegramLoginInterop;
    private TelegramAuthenticationRequest telegramData;

    string jsUpdateLoginRefId = "updateTelegramLogin";

    protected override async Task OnInitializedAsync()
    {
        telegramData = await localStorage.GetItemAsync<TelegramAuthenticationRequest>("telegramData");
        telegramLoginInterop = new TelegramLoginInterop(Login);
        appState.AppStateChanged += StateHasChanged;
        await Js.InvokeVoidAsync("setupDotnetRef", DotNetObjectReference.Create(telegramLoginInterop), jsUpdateLoginRefId);
        await base.OnInitializedAsync();
    }

    private async Task Logout()
    {
        await localStorage.ClearAsync();
        client.ClearHeaders();
        appState.IsLoggedIn = false;
    }

    private async Task Login(JsonElement receivedTelegramInfo)
    {
        var options = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };
        var telegramData = receivedTelegramInfo.Deserialize<TelegramAuthenticationRequest>(options);
        var token = await client.AuthenticateTelegramUser(telegramData);

        await localStorage.SetItemAsync("telegramData", telegramData);
        await localStorage.SetItemAsync("token", token);
        appState.IsLoggedIn = true;
    }
}